# Literate programming
# --------------------

tangle_selector = .k
rule tangle
    description = Tangling $in
    command     = LUA_PATH=$tangle_repository/?.lua    $
                  pandoc $in -o $out --metadata=code:$tangle_selector --to "$tangle_repository/tangle.lua"

# Basic K Toolchain
# -----------------

rule kompile
    description     = Kompiling $in ($backend)
    command         = kompile --backend $backend --debug --directory $$(dirname $$(dirname $out)) $in

rule krun
    description     = Running $in ($directory)
    command         = krun $flags --debug --directory $directory $in > $out

rule kprove
    description     = Checking specification $in
    command         = kprove $flags --directory $directory $in

# Testing
# -------

rule check-test-result
    description = Checking $in
    command = git diff --no-index $in $expected

# Advanced OCaml Backend Usage
# ----------------------------
#
# For compiling K plugins for the OCaml backend, we need a two-stage kompilation process. In the
# first step, we generate the Constants.ml and other ml files, and use those to in the compilation
# of the plugin implementation.
#
rule kompile-gen-ml
    description     = kompiling $in: Generating OCaml files
    command         = kompile $flags --backend ocaml --debug --directory $directory $in $
                           --gen-ml-only

rule kompile-interpreter
    description     = kompile $in: Compiling
    command         = bin/interpreter-from-ml $$(dirname $out) $mlplugins

rule ocamllex
    description     = ocamllex $in
    command         = ocamllex $flags $in

rule ocamlyacc
    description     = ocamlyacc $in
    command         = ocamlyacc $flags $in

rule ocamlopt
    description     = ocamlopt $out
    command         = ocamlfind opt -o $out $flags $in
